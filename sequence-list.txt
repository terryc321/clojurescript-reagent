(ns hello2.core
    (:require [reagent.core :as reagent :refer [atom]]))

(enable-console-print!)

(println "This text is printed from src/hello2/core.cljs. Go ahead and edit it and see reloading in action.")

(defonce app-state (atom {:text (str "Hello world 2.3!" (+ 1 2 3))}))

;; to do application
(def c (reagent/atom 1))

(def item (reagent/atom ""))
(def items (reagent/atom ["alpha","beta","charlie"]))




;; add item to tasks
(defn add-item-to-tasks [x]
  (reset! items (conj items x))
  (println "added item to tasks ")
  (println items))


(defn li-shout [x]
  [:li x])
  ;;;[:li (clojure.string/uppercase x)])

(defn task-list-components []
  ;;(concat [:ol] (map li-shout items)))
  ;;(concat [:ol items]))
  [:ol
   [:li "hello world"]
   [:li "hi"]
   [:li "hoe"]])

(defn task-list-components2 []
  (conj [:ol]
        ;;(goog.object.forEach items
        (mapv 
                 (fn [x]
                   [:li x])
                 items)))
        ;;(mapv (fn [x] [:li x {:key x}]) items)))

(defn list-em [x]
  (fn [x] [:li x]))
   

(defn task-list-components3 []
  (conj [:ol]
        (mapv
                  (fn [x] [:li x])
         ["alpha" ,"beta" ,"charlie" ,"detla"]

         )))

(defn task-list-components4 []
  (map list-em ["alpha" "beta" "charlie"]))


(defn task-list-components5 []
  (conj [:ol]
        (for [i (range 10)]
          ^{:key (str "tr-" i)}
          [:li (str "entry " i)])))


(defn task-list-components6 []
  (conj [:ol]
        (for [i @items]
          ^{:key (str "tr-" i)}
          [:li (str "entry " i)])))


(defn task-list-components7 []
  (conj [:ol]
        (for [i @items]
          ^{:key i}
          [:li i {:style (str "color: #" 123) }])))

;; [:tr (for [j (range 3)]
  ;;        ^{:key (str "td-" j)}
  ;;        [:td (str "Row " i ", Col " j)])]))



(defn hello-world []
  [:div
   [:h1 (:text "hello world")]
   [:p "are we ready?"]

   ;;[task-list-components]
   ;;[task-list-components2]
   ;;[task-list-components3]
   ;;[task-list-components4]
   ;;[task-list-components5]
   ;;[task-list-components6]
   [task-list-components7]
   
   ;;(println (map (fn [x] [:li x]) items))
   [:p "and we got to the end!"]
   
   ])
  
(reagent/render-component [hello-world]
                          (. js/document (getElementById "app")))


(defn on-js-reload []
  ;; optionally touch your app-state to force rerendering depending on
  ;; your application
  ;; (swap! app-state update-in [:__figwheel_counter] inc)
  )
